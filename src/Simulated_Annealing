import gurobipy as gp
from util import *
from math import floor, exp
from random import sample, random
import pylab

filename = f'R{3}.switch'
F = read_pos_file(filename)
G = Graph(F)
m = gp.Model()

# Sets
V = G.V
A = G.edges

def interruption_flow(X, Theta, A):
    F = {}
    for (i, j) in A:
        if X[i, j] == 1:  # Switch is present
            F[i, j] = 0
        else:  # No switch
            F[i, j] = Theta[j]
    return F

def Cost(X, L_D, Theta, A):
    F = interruption_flow(X, Theta, A)
    return sum((L_D[i] - L_D[j]) * F[i, j] for (i, j) in A)

def generate_initial_solution(A, num_switches):
    """ Generate an initial solution with a fixed number of switches placed. """
    chosen_edges = sample(A, num_switches)
    solution = {arc: 1 if arc in chosen_edges else 0 for arc in A}
    return solution

def ChooseNeigh(solution, A):
    """ Generate a neighboring solution by flipping the state of one random switch. """
    neighbor = solution.copy()
    arc = sample(A, 1)[0]  # Randomly choose one arc
    neighbor[arc] = 1 - neighbor[arc]  # Flip the switch
    return neighbor

def RunSA(Solution, Cost, ChooseNeigh, T, N, alpha):
    L_D = {i: G.get_downstream_load(i) for i in V}  # Downstream load of node i
    Theta = {v: G.index_node[v].theta for v in V}
    P = 0.2

    E = Cost(Solution, L_D, Theta, A)
    Best = E
    CostArr = [E]
    BestArr = [Best]
    BestSol = Solution.copy()  # Make a copy of the solution

    for i in range(N):
        neighbor = ChooseNeigh(Solution, A)  # Get a neighbor solution
        delta = Cost(neighbor, L_D, Theta, A) - E  # Calculate change in cost
        
        if delta < 0 or exp(-delta / T) > random():
            Solution = neighbor  # Accept the neighbor solution
            E += delta
            if E < Best:
                Best = E
                BestSol = Solution.copy()  # Update best solution
        
        CostArr.append(E)
        BestArr.append(Best)
        T *= alpha
    
    print(Best, T)
    pylab.plot(range(N + 1), CostArr)
    pylab.plot(range(N + 1), BestArr)
    pylab.show()
    return BestSol

# Example usage
num_switches_to_place = 20  # Specify the number of switches to place
initial_solution = generate_initial_solution(A, num_switches_to_place)
ENS = RunSA(initial_solution, Cost, ChooseNeigh, 1000, 1000000, 0.99999)
